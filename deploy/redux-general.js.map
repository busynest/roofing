{"version":3,"file":"redux-general.js","sourceRoot":"","sources":["../src/redux-general.ts"],"names":[],"mappings":"AAWA,MAAM,CAAC,MAAM,WAAW,GAAc,aAAa,CAAC;AAQoC,CAAC;AASzF,MAAM,KAAK,GAAc;IACrB,IAAI,EAAE,kBAAkB;CACzB,CAAC;AAGF,MAAM,CAAC,MAAM,GAAG,GAAoC,CAAE,KAAK,GAAG,KAAK,EAAE,MAAM,EAAG,EAAE;IAC9E,QAAS,MAAM,CAAC,IAAI,EAAG;QAErB,KAAK,WAAW,CAAC,CAAC,OAAO,EAAE,GAAG,KAAK,EAAE,IAAI,EAAe,MAAM,CAAC,IAAI,EAAE,CAAC;QAEtE;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,CAAA;AAGH,MAAM,CAAC,MAAM,QAAQ,GAA+B,CAAC,IAAY,EAAE,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;IAEvF,QAAO,IAAI,EAAE;QAEX,KAAK,kBAAkB;YACrB,MAAM,CAAC,oBAAoB,CAAC,CAAC;YAC7B,MAAM;QAER,KAAK,cAAc;YACjB,MAAM,CAAC,gBAAgB,CAAC,CAAC;YACzB,MAAM;QAER,KAAK,gBAAgB;YACnB,MAAM,CAAC,kBAAkB,CAAC,CAAC;YAC3B,MAAM;QAER,KAAK,mBAAmB;YACtB,MAAM,CAAC,qBAAqB,CAAC,CAAC;YAC9B,MAAM;QAER;YACE,MAAM,MAAM,CAAC,oBAAoB,CAAC,CAAC;KAEtC;IACD,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAA;AAGD,MAAM,UAAU,GAA2B,CAAC,IAAY,EAAE,EAAE;IAC1D,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;AACrC,CAAC,CAAA","sourcesContent":["\r\n// iterable interface\r\n// yield can only be called directly from the generator function that contains it\r\n// It cannot be called from nested functions or from callbacks.\r\n\r\nimport { Action }                           from 'redux';\r\nimport { ThunkAction }                      from 'redux-thunk';\r\nimport { RootState, RootAction }            from './store';\r\nimport { Reducer, ActionCreator }           from \"redux\";\r\n\r\n// Module Declaration Bindings to functions, objects, or primitive values.\r\nexport const UPDATE_PAGE            = 'UPDATE_PAGE';\r\n\r\n// < > Module Interface Declaration Object.\r\nexport interface AppState {\r\n    page:             string\r\n}\r\n\r\n// < > Module Interface Action Declaration Object, with Payload Function.\r\nexport interface setPage          extends Action<'UPDATE_PAGE'>         { page: string };\r\n\r\n// < > Merge Declarations to Combine Type Interfaces.\r\nexport type appAction = setPage ; \r\n\r\n// < > TypeScript Alias / Interface: Array Type Iterable. Immutable state context.\r\nexport type ThunkResult = ThunkAction <void, RootState, undefined, appAction>;\r\n\r\n// Object Initializer Notation.\r\nconst start : AppState = {\r\n    page: 'primary-contract'\r\n  };\r\n  \r\n  // < > Typescript - Redux Reducer Function.\r\n  export const app : Reducer <AppState, RootAction> = ( state = start, action ) => {\r\n    switch ( action.type ) {\r\n\r\n      case UPDATE_PAGE: return { ...state, page:              action.page };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\n// LOAD PAGE\r\nexport const loadPage: ActionCreator<ThunkResult> = (page: string) => async (dispatch) => {\r\n\r\n  switch(page) {\r\n\r\n    case 'primary-contract':\r\n      import('./primary-contract');\r\n      break;\r\n    \r\n    case 'sub-contract':\r\n      import('./sub-contract');\r\n      break;\r\n\r\n    case 'purchase-order':\r\n      import('./purchase-order');\r\n      break;\r\n\r\n    case 'warranty-contract':\r\n      import('./warranty-contract');\r\n      break;\r\n\r\n    default:\r\n      await import('./primary-contract');\r\n\r\n  }\r\n  dispatch(updatePage(page)); // Send Object instead of String\r\n}\r\n\r\n// UPDATE PAGE\r\nconst updatePage: ActionCreator<setPage> = (page: string) => {\r\n  return { type: UPDATE_PAGE, page };\r\n}\r\n\r\n\r\n\r\n"]}